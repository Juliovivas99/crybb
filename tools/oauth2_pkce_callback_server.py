#!/usr/bin/env python3
"""
OAuth 2.0 PKCE Callback Server for Twitter Authentication

This script runs a minimal FastAPI web server that handles the OAuth 2.0 PKCE flow
for Twitter authentication. It provides a callback endpoint that exchanges the
authorization code for access and refresh tokens.

Usage:
    python tools/oauth2_pkce_callback_server.py

The script will:
1. Print the authorization URL to visit in the browser
2. Start a server on http://localhost:8000
3. Handle the callback and exchange tokens
4. Print tokens to console and optionally save to .env.local.tokens
"""

import asyncio
import base64
import hashlib
import os
import secrets
import urllib.parse
from pathlib import Path
from typing import Optional

import httpx
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
import uvicorn


# Load environment variables
load_dotenv()

# Configuration
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = "http://localhost:8000/callback"
SCOPES = ["tweet.read", "tweet.write", "users.read", "offline.access"]
TOKEN_URL = "https://api.twitter.com/2/oauth2/token"
AUTH_URL = "https://twitter.com/i/oauth2/authorize"

# In-memory storage for PKCE code verifier
code_verifier: Optional[str] = None

# FastAPI app
app = FastAPI(title="Twitter OAuth2 PKCE Callback Server")


def generate_pkce_pair() -> tuple[str, str]:
    """
    Generate PKCE code verifier and code challenge pair.
    
    Returns:
        tuple: (code_verifier, code_challenge)
    """
    # Generate a cryptographically random code verifier (43-128 characters)
    code_verifier = base64.urlsafe_b64encode(secrets.token_bytes(32)).decode('utf-8').rstrip('=')
    
    # Generate code challenge using SHA256 hash
    code_challenge = base64.urlsafe_b64encode(
        hashlib.sha256(code_verifier.encode('utf-8')).digest()
    ).decode('utf-8').rstrip('=')
    
    return code_verifier, code_challenge


def generate_authorization_url() -> str:
    """
    Generate the Twitter OAuth2 authorization URL with PKCE parameters.
    
    Returns:
        str: Complete authorization URL
    """
    global code_verifier
    
    if not CLIENT_ID:
        raise ValueError("CLIENT_ID not found in environment variables")
    
    # Generate PKCE pair
    code_verifier, code_challenge = generate_pkce_pair()
    
    # Store code verifier for later use
    code_verifier = code_verifier
    
    # Build query parameters
    params = {
        "response_type": "code",
        "client_id": CLIENT_ID,
        "redirect_uri": REDIRECT_URI,
        "scope": " ".join(SCOPES),
        "state": secrets.token_urlsafe(32),
        "code_challenge": code_challenge,
        "code_challenge_method": "S256"
    }
    
    # Build URL
    query_string = urllib.parse.urlencode(params)
    auth_url = f"{AUTH_URL}?{query_string}"
    
    return auth_url


async def exchange_code_for_tokens(code: str) -> dict:
    """
    Exchange authorization code for access and refresh tokens.
    
    Args:
        code: Authorization code from Twitter
        
    Returns:
        dict: Token response from Twitter API
        
    Raises:
        httpx.HTTPStatusError: If the token exchange fails
    """
    if not code_verifier:
        raise ValueError("Code verifier not found. Please restart the server.")
    
    if not CLIENT_ID:
        raise ValueError("CLIENT_ID not found in environment variables")
    
    if not CLIENT_SECRET:
        raise ValueError("CLIENT_SECRET not found in environment variables")
    
    # Prepare token exchange request
    data = {
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": REDIRECT_URI,
        "code_verifier": code_verifier,
        "client_id": CLIENT_ID
    }
    
    # Create Basic Auth header
    credentials = f"{CLIENT_ID}:{CLIENT_SECRET}"
    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
    
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": f"Basic {encoded_credentials}"
    }
    
    # Make the request
    async with httpx.AsyncClient() as client:
        response = await client.post(
            TOKEN_URL,
            data=data,
            headers=headers
        )
        response.raise_for_status()
        return response.json()


def save_tokens_to_file(access_token: str, refresh_token: str) -> None:
    """
    Save tokens to .env.local.tokens file.
    
    Args:
        access_token: OAuth2 access token
        refresh_token: OAuth2 refresh token
    """
    project_root = Path(__file__).parent.parent
    tokens_file = project_root / ".env.local.tokens"
    
    tokens_content = f"""# OAuth 2.0 User Tokens
# Generated by oauth2_pkce_callback_server.py
OAUTH2_USER_ACCESS_TOKEN={access_token}
OAUTH2_USER_REFRESH_TOKEN={refresh_token}
"""
    
    with open(tokens_file, 'w') as f:
        f.write(tokens_content)
    
    print(f"‚úÖ Tokens saved to: {tokens_file}")


@app.get("/callback")
async def callback(request: Request):
    """
    Handle OAuth2 callback from Twitter.
    
    Args:
        request: FastAPI request object
        
    Returns:
        HTMLResponse: Success or error page
    """
    try:
        # Extract query parameters
        code = request.query_params.get("code")
        state = request.query_params.get("state")
        error = request.query_params.get("error")
        
        # Handle OAuth errors
        if error:
            error_description = request.query_params.get("error_description", "Unknown error")
            error_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>OAuth Error</title>
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; }}
                    .error {{ color: #d73a49; background: #ffeef0; padding: 20px; border-radius: 8px; }}
                </style>
            </head>
            <body>
                <h1>‚ùå OAuth Error</h1>
                <div class="error">
                    <strong>Error:</strong> {error}<br>
                    <strong>Description:</strong> {error_description}
                </div>
                <p>Please check your Twitter app configuration and try again.</p>
            </body>
            </html>
            """
            return HTMLResponse(content=error_html, status_code=400)
        
        # Validate required parameters
        if not code:
            error_html = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Missing Code</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .error { color: #d73a49; background: #ffeef0; padding: 20px; border-radius: 8px; }
                </style>
            </head>
            <body>
                <h1>‚ùå Missing Authorization Code</h1>
                <div class="error">
                    No authorization code received from Twitter.
                </div>
                <p>Please try the authorization flow again.</p>
            </body>
            </html>
            """
            return HTMLResponse(content=error_html, status_code=400)
        
        # Exchange code for tokens
        print(f"üîÑ Exchanging authorization code for tokens...")
        token_response = await exchange_code_for_tokens(code)
        
        # Extract tokens
        access_token = token_response.get("access_token")
        refresh_token = token_response.get("refresh_token")
        token_type = token_response.get("token_type", "Bearer")
        expires_in = token_response.get("expires_in")
        scope = token_response.get("scope")
        
        # Print tokens to console
        print("\n" + "="*60)
        print("üéâ SUCCESS! Tokens received from Twitter:")
        print("="*60)
        print(f"Access Token: {access_token}")
        print(f"Refresh Token: {refresh_token}")
        print(f"Token Type: {token_type}")
        if expires_in:
            print(f"Expires In: {expires_in} seconds")
        if scope:
            print(f"Scope: {scope}")
        print("="*60)
        
        # Save tokens to file
        if access_token and refresh_token:
            save_tokens_to_file(access_token, refresh_token)
        
        # Return success page
        success_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>OAuth Success</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; text-align: center; }}
                .success {{ color: #28a745; background: #d4edda; padding: 20px; border-radius: 8px; }}
                .token-info {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0; }}
            </style>
        </head>
        <body>
            <h1>‚úÖ Tokens Received Successfully!</h1>
            <div class="success">
                <p><strong>Authentication completed!</strong></p>
                <p>You can now close this tab and return to your terminal.</p>
            </div>
            <div class="token-info">
                <p><strong>Token Type:</strong> {token_type}</p>
                <p><strong>Expires In:</strong> {expires_in} seconds</p>
                <p><strong>Scope:</strong> {scope}</p>
            </div>
            <p><em>Check your terminal for the full token details.</em></p>
        </body>
        </html>
        """
        return HTMLResponse(content=success_html)
        
    except httpx.HTTPStatusError as e:
        error_msg = f"HTTP {e.response.status_code}: {e.response.text}"
        print(f"‚ùå Token exchange failed: {error_msg}")
        
        error_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Token Exchange Error</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .error {{ color: #d73a49; background: #ffeef0; padding: 20px; border-radius: 8px; }}
            </style>
        </head>
        <body>
            <h1>‚ùå Token Exchange Failed</h1>
            <div class="error">
                <strong>Error:</strong> {error_msg}
            </div>
            <p>Please check your Twitter app configuration and try again.</p>
        </body>
        </html>
        """
        return HTMLResponse(content=error_html, status_code=500)
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Unexpected error: {error_msg}")
        
        error_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Unexpected Error</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .error {{ color: #d73a49; background: #ffeef0; padding: 20px; border-radius: 8px; }}
            </style>
        </head>
        <body>
            <h1>‚ùå Unexpected Error</h1>
            <div class="error">
                <strong>Error:</strong> {error_msg}
            </div>
            <p>Please check the terminal for more details.</p>
        </body>
        </html>
        """
        return HTMLResponse(content=error_html, status_code=500)


def print_authorization_url():
    """Print the authorization URL and instructions."""
    try:
        auth_url = generate_authorization_url()
        
        print("\n" + "="*80)
        print("üöÄ TWITTER OAUTH2 PKCE CALLBACK SERVER")
        print("="*80)
        print(f"Server starting on: {REDIRECT_URI}")
        print(f"Scopes: {', '.join(SCOPES)}")
        print("\nüìã STEP 1: Copy this URL and open it in your browser:")
        print("-" * 60)
        print(auth_url)
        print("-" * 60)
        print("\nüìã STEP 2: After authorization, you'll be redirected back here")
        print("üìã STEP 3: Check this terminal for your tokens")
        print("\n" + "="*80)
        
    except Exception as e:
        print(f"‚ùå Error generating authorization URL: {e}")
        print("Please check your CLIENT_ID in the .env file")
        raise


def main():
    """Main function to start the server."""
    # Validate configuration
    if not CLIENT_ID:
        print("‚ùå Error: CLIENT_ID not found in environment variables")
        print("Please add CLIENT_ID to your .env file")
        return
    
    if not CLIENT_SECRET:
        print("‚ùå Error: CLIENT_SECRET not found in environment variables")
        print("Please add CLIENT_SECRET to your .env file")
        return
    
    # Print authorization URL
    print_authorization_url()
    
    # Start the server
    print("\nüåê Starting callback server...")
    print("Press Ctrl+C to stop the server")
    
    try:
        uvicorn.run(
            app,
            host="127.0.0.1",
            port=8000,
            log_level="info"
        )
    except KeyboardInterrupt:
        print("\nüëã Server stopped by user")
    except Exception as e:
        print(f"‚ùå Server error: {e}")


if __name__ == "__main__":
    main()
